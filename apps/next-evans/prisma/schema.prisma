generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model fluent_enums {
  id   String @id @db.Uuid
  name String
  case String

  @@unique([name, case], map: "uq:_fluent_enums.name+_fluent_enums.case")
  @@map("_fluent_enums")
}

model fluent_migrations {
  id         String    @id @db.Uuid
  name       String    @unique(map: "uq:_fluent_migrations.name")
  batch      Int
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  @@map("_fluent_migrations")
}

model artifact_production_versions {
  id         String   @id @db.Uuid
  version    String   @unique(map: "uq:artifact_production_versions.version")
  created_at DateTime @db.Timestamptz(6)
}

model document_tags {
  id          String             @id @db.Uuid
  document_id String             @db.Uuid
  type        document_tags_enum
  created_at  DateTime           @db.Timestamptz(6)
  documents   documents          @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([type, document_id], map: "uq:document_tags.type+document_tags.document_id")
}

model documents {
  id                                                                String              @id @db.Uuid
  friend_id                                                         String              @db.Uuid
  alt_language_id                                                   String?             @db.Uuid
  title                                                             String              @unique(map: "uq:documents.title")
  slug                                                              String
  filename                                                          String              @unique(map: "uq:documents.filename")
  published                                                         Int?
  original_title                                                    String?
  incomplete                                                        Boolean
  description                                                       String
  partial_description                                               String
  featured_description                                              String?
  created_at                                                        DateTime            @db.Timestamptz(6)
  updated_at                                                        DateTime            @db.Timestamptz(6)
  deleted_at                                                        DateTime?           @db.Timestamptz(6)
  document_tags                                                     document_tags[]
  documents                                                         documents?          @relation("documentsTodocuments", fields: [alt_language_id], references: [id], onUpdate: NoAction)
  other_documents                                                   documents[]         @relation("documentsTodocuments")
  friends                                                           friends             @relation(fields: [friend_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  editions                                                          editions[]
  related_documents_related_documents_document_idTodocuments        related_documents[] @relation("related_documents_document_idTodocuments")
  related_documents_related_documents_parent_document_idTodocuments related_documents[] @relation("related_documents_parent_document_idTodocuments")
}

model downloads {
  id                String          @id @db.Uuid
  format            download_format
  source            download_source
  is_mobile         Boolean
  audio_quality     audio_quality?
  audio_part_number Int?
  user_agent        String?
  os                String?
  browser           String?
  platform          String?
  referrer          String?
  ip                String?
  city              String?
  region            String?
  postal_code       String?
  country           String?
  latitude          String?
  longitude         String?
  created_at        DateTime        @db.Timestamptz(6)
  edition_id        String?         @db.Uuid
  editions          editions?       @relation(fields: [edition_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model edition_audio_parts {
  id             String         @id @db.Uuid
  audio_id       String         @db.Uuid
  title          String
  duration       Float
  chapters       Int[]
  order          Int
  mp3_size_hq    Int
  mp3_size_lq    Int
  external_id_hq Int?
  external_id_lq Int?
  created_at     DateTime       @db.Timestamptz(6)
  updated_at     DateTime       @db.Timestamptz(6)
  edition_audios edition_audios @relation(fields: [audio_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([audio_id, order], map: "uq:edition_audio_parts.audio_id+edition_audio_parts.order")
}

model edition_audios {
  id                      String                @id @db.Uuid
  edition_id              String                @unique(map: "uq:edition_audios.edition_id") @db.Uuid
  reader                  String
  is_incomplete           Boolean
  mp3_zip_size_hq         Int
  mp3_zip_size_lq         Int
  m4b_size_hq             Int
  m4b_size_lq             Int
  external_playlist_id_hq Int?
  external_playlist_id_lq Int?
  created_at              DateTime              @db.Timestamptz(6)
  updated_at              DateTime              @db.Timestamptz(6)
  edition_audio_parts     edition_audio_parts[]
  editions                editions              @relation(fields: [edition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model edition_chapters {
  id                    String   @id @db.Uuid
  edition_id            String   @db.Uuid
  order                 Int
  custom_id             String?
  short_heading         String
  is_intermediate_title Boolean
  sequence_number       Int?
  non_sequence_title    String?
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  editions              editions @relation(fields: [edition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([edition_id, order], map: "uq:edition_chapters.edition_id+edition_chapters.order")
}

model edition_impressions {
  id                            String              @id @db.Uuid
  edition_id                    String              @unique(map: "uq:edition_impressions.edition_id") @db.Uuid
  adoc_length                   Int
  paperback_size_variant        print_size_variants
  paperback_volumes             Int[]
  published_revision            String
  production_toolchain_revision String
  created_at                    DateTime            @db.Timestamptz(6)
  editions                      editions            @relation(fields: [edition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model editions {
  id                      String               @id @db.Uuid
  document_id             String               @db.Uuid
  type                    edition_type
  editor                  String?
  is_draft                Boolean
  paperback_splits        Int[]
  paperback_override_size print_size_variants?
  created_at              DateTime             @db.Timestamptz(6)
  updated_at              DateTime             @db.Timestamptz(6)
  deleted_at              DateTime?            @db.Timestamptz(6)
  downloads               downloads[]
  edition_audios          edition_audios?
  edition_chapters        edition_chapters[]
  edition_impressions     edition_impressions?
  documents               documents            @relation(fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  isbns                   isbns[]
  order_items             order_items[]

  @@unique([document_id, type], map: "uq:editions.document_id+editions.type")
}

model free_order_requests {
  id              String   @id @db.Uuid
  name            String
  email           String
  requested_books String
  about_requester String
  address_street  String
  address_street2 String?
  address_city    String
  address_state   String
  address_zip     String
  address_country String
  source          String
  created_at      DateTime @db.Timestamptz(6)
  updated_at      DateTime @db.Timestamptz(6)
  orders          orders[]
}

model friend_quotes {
  id         String   @id @db.Uuid
  friend_id  String   @db.Uuid
  source     String
  text       String
  order      Int
  context    String?
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  friends    friends  @relation(fields: [friend_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([friend_id, order], map: "uq:friend_quotes.friend_id+friend_quotes.order")
}

model friend_residence_durations {
  id                  String             @id @db.Uuid
  friend_residence_id String?            @db.Uuid
  start               Int?
  end                 Int?
  created_at          DateTime?          @db.Timestamptz(6)
  friend_residences   friend_residences? @relation(fields: [friend_residence_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model friend_residences {
  id                         String                       @id @db.Uuid
  friend_id                  String                       @db.Uuid
  city                       String
  region                     String
  created_at                 DateTime                     @db.Timestamptz(6)
  updated_at                 DateTime                     @db.Timestamptz(6)
  friend_residence_durations friend_residence_durations[]
  friends                    friends                      @relation(fields: [friend_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model friends {
  id                String              @id @db.Uuid
  lang              lang
  name              String
  slug              String
  gender            gender
  description       String
  born              Int?
  died              Int?
  published         DateTime?           @db.Timestamptz(6)
  created_at        DateTime            @db.Timestamptz(6)
  updated_at        DateTime            @db.Timestamptz(6)
  deleted_at        DateTime?           @db.Timestamptz(6)
  documents         documents[]
  friend_quotes     friend_quotes[]
  friend_residences friend_residences[]

  @@unique([lang, slug], map: "uq:friends.lang+friends.slug")
}

model isbns {
  id         String    @id @db.Uuid
  code       String    @unique(map: "uq:isbns.code")
  edition_id String?   @db.Uuid
  created_at DateTime  @db.Timestamptz(6)
  updated_at DateTime  @db.Timestamptz(6)
  editions   editions? @relation(fields: [edition_id], references: [id], onUpdate: NoAction)
}

model order_items {
  id         String    @id @db.Uuid
  order_id   String    @db.Uuid
  quantity   Int
  unit_price Int
  created_at DateTime  @db.Timestamptz(6)
  edition_id String?   @db.Uuid
  editions   editions? @relation(fields: [edition_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model orders {
  id                    String                 @id @db.Uuid
  payment_id            String
  print_job_status      order_print_job_status
  print_job_id          Int?
  amount                Int
  shipping              Int
  taxes                 Int
  cc_fee_offset         Int
  shipping_level        order_shipping_level
  email                 String
  address_name          String
  address_street        String
  address_street2       String?
  address_city          String
  address_state         String
  address_zip           String
  address_country       String
  lang                  lang
  source                order_source
  created_at            DateTime               @db.Timestamptz(6)
  updated_at            DateTime               @db.Timestamptz(6)
  free_order_request_id String?                @db.Uuid
  fees                  Int?                   @default(0)
  order_items           order_items[]
  free_order_requests   free_order_requests?   @relation(fields: [free_order_request_id], references: [id], onUpdate: NoAction)
}

model related_documents {
  id                                                        String    @id @db.Uuid
  parent_document_id                                        String    @db.Uuid
  document_id                                               String    @db.Uuid
  description                                               String
  created_at                                                DateTime  @db.Timestamptz(6)
  updated_at                                                DateTime  @db.Timestamptz(6)
  documents_related_documents_document_idTodocuments        documents @relation("related_documents_document_idTodocuments", fields: [document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  documents_related_documents_parent_document_idTodocuments documents @relation("related_documents_parent_document_idTodocuments", fields: [parent_document_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model token_scopes {
  id         String   @id @db.Uuid
  token_id   String   @db.Uuid
  scope      scopes
  created_at DateTime @db.Timestamptz(6)
  tokens     tokens   @relation(fields: [token_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([token_id, scope], map: "uq:token_scopes.token_id+token_scopes.scope")
}

model tokens {
  id           String         @id @db.Uuid
  value        String         @unique(map: "uq:tokens.value") @db.Uuid
  description  String
  created_at   DateTime       @db.Timestamptz(6)
  uses         Int?
  token_scopes token_scopes[]
}

enum audio_quality {
  lq
  hq
}

enum document_tags_enum {
  journal
  letters
  exhortation
  doctrinal
  treatise
  history
  allegory
  spiritualLife
}

enum download_format {
  epub
  mobi
  webPdf
  mp3Zip
  m4b
  mp3
  speech
  podcast
  appEbook
}

enum download_source {
  website
  podcast
  app
}

enum edition_type {
  updated
  original
  modernized
}

enum gender {
  male
  female
  mixed
}

enum lang {
  en
  es
}

enum order_print_job_status {
  presubmit
  pending
  accepted
  rejected
  shipped
  canceled
  bricked
}

enum order_shipping_level {
  mail
  priorityMail
  groundHd
  ground
  expedited
  express
  groundBus
}

enum order_source {
  website
  internal
}

enum print_size_variants {
  s
  m
  xl
  xlCondensed
}

enum scopes {
  queryDownloads
  mutateDownloads
  queryOrders
  mutateOrders
  mutateArtifactProductionVersions
  all
  queryArtifactProductionVersions
  queryEntities
  mutateEntities
  queryTokens
  mutateTokens
}
