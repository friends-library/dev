import fs from 'node:fs';
import exec from 'x-exec';
import type { Domain } from './types';

async function main(): Promise<void> {
  const consumers: Consumer[] = [
    new Consumer(`cli`, `Dev`, `apps/cli/src/pairql`),
    // new Consumer(`jones`, `Dev`, `apps/jones/src/pairql`),
  ];

  const promises = consumers.map(async (consumer) => {
    consumer.clean();
    const response = await fetch(consumer.endpoint);
    const output = (await response.json()) as CodegenOutput;
    const clientMethods: string[] = [];
    const pairIndexLines: string[] = [];
    for (const [pairName, { decl, fetcher }] of Object.entries(output.pairs)) {
      fs.writeFileSync(`${consumer.pairDir}/${pairName}.ts`, autogenerated(decl));
      clientMethods.push(`export function ${fetcher}`);
      pairIndexLines.push(`export * from './${pairName}';`);
    }
    fs.writeFileSync(`${consumer.absPath}/client.ts`, clientFile(clientMethods));
    fs.writeFileSync(
      `${consumer.pairDir}/index.ts`,
      autogenerated(pairIndexLines.join(`\n`)),
    );
    exec.exit(`${PRETTIER_FORMAT} ${consumer.absPath}/*`);
  });
  await Promise.all(promises);
}

class Consumer {
  public constructor(
    private name: string,
    private domain: Domain,
    private destDir: string,
  ) {}

  public get absPath(): string {
    return `${__dirname}/../../../${this.destDir}`;
  }

  public get endpoint(): string {
    return `http://127.0.0.1:8080/codegen/${this.domain.toLowerCase()}`;
  }

  public get pairDir(): string {
    return `${this.absPath}/pairs`;
  }

  public clean(): void {
    exec(`rm -rf ${this.absPath}`);
    exec(`mkdir -p ${this.absPath}`);
    exec(`mkdir -p ${this.pairDir}`);
  }
}

type CodegenOutput = {
  shared: Record<string, string>;
  pairs: Record<string, { decl: string; fetcher: string }>;
};

function clientFile(methods: string[]): string {
  return [
    `// auto-generated, do not edit`,
    `import type { Result } from '@friends-library/pairql';`,
    `import type * as P from './pairs'`,
    `import { query } from '../query';`,
    ``,
    methods.join(`\n\n`),
  ].join(`\n`);
}

// function spaced(...strings: string[]): string {
//   return strings.join(`\n\n`);
// }

// function expand(decl: string): string {
//   return decl.replace(/Array<{ /g, `Array<{\n`).replace(/{ /g, `{\n`);
// }

function autogenerated(file: string): string {
  return `// auto-generated, do not edit\n${file}`;
}

const PRETTIER_FORMAT = [
  `${__dirname}/../../../node_modules/.bin/prettier`,
  `--config`,
  `${__dirname}/../../../.prettierrc.json`,
  `--write`,
].join(` `);

main();
